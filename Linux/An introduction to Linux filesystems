Basic filesystem functions
	Disk storage is a necessity that brings with it some interesting and inescapable details. 
	All filesystems need to provide a namespace—that is, a naming and organizational methodology.
	This defines how a file can be named. Once the namespace has been defined, a metadata structure is necessary to provide the logical foundation for that namespace.
	This includes the data structures required to support a hierarchical directory structure; structures to determine which blocks of space on the disk are used and which are available; structures that allow for maintaining the names of the files and directories;
	and others.
	Filesystems also require an Application Programming Interface (API) that provides access to system function calls which manipulate filesystem objects like files and directories.
	APIs provide for tasks such as creating, moving, and deleting files. It also provides algorithms that determine things like where a file is placed on a filesystem.
	
	Modern filesystems also provide a security model, which is a scheme for defining access rights to files and directories. 
	
	The final building block is the software required to implement all of these functions.
	Linux uses a two-part software implementation as a way to improve both system and programmer efficiency.
	
									Kernel
									   |
									   |
							  Virtual File System
									   |
									   |
						EXT3  HPFS  VFAT  EXT4  FreeBSD
								       |
									   |
								    Hardware
									
	The first part of this two-part implementation is the Linux virtual filesystem.
	This virtual filesystem provides a single set of commands for the kernel, and developers, to access all types of filesystems.
	The virtual filesystem software calls the specific device driver required to interface to the various types of filesystems.
	The filesystem-specific device drivers are the second part of the implementation.
	The device driver interprets the standard set of filesystem commands to ones specific to the type of filesystem on the partition or logical volume.

	
Directory structure
	In Linux and many other operating systems, directories can be structured in a tree-like hierarchy. The Linux directory structure is well defined and documented in the Linux Filesystem Hierarchy Standard (FHS).
	
	The following table provides a very brief list of the standard, well-known, and defined top-level Linux directories and their purposes.
		
			Directory			Description
				/ (root 			The root filesystem is the top-level directory of the filesystem. 
				filesystem)			It must contain all of the files required to boot the Linux system before other filesystems are mounted. 
									It must include all of the required executables and libraries required to boot the remaining filesystems.
									After the system is booted, all other filesystems are mounted on standard,
									well-defined mount points as subdirectories of the root filesystem.
				
				/bin				The /bin directory contains user executable files.
				
				/boot				Contains the static bootloader and kernel executable and configuration files required to boot a Linux computer.
				
				/dev				This directory contains the device files for every hardware device attached to the system. 
									These are not device drivers, rather they are files that represent each device on the computer and facilitate access to those devices.

				/etc				Contains the local system configuration files for the host computer.
				
				/home				Home directory storage for user files. Each user has a subdirectory in /home.
				
				/lib				Contains shared library files that are required to boot the system.

				/media				A place to mount external removable media devices such as USB thumb drives that may be connected to the host.
				
				/mnt				A temporary mountpoint for regular filesystems (as in not removable media) that can be used while the administrator is repairing or working on a filesystem.
				
				/opt				Optional files such as vendor supplied application programs should be located here.
				
				/root				This is not the root (/) filesystem. It is the home directory for the root user.
				
				/sbin				System binary files. These are executables used for system administration.
				
				/tmp				Temporary directory. Used by the operating system and many programs to store temporary files. Users may also store files here temporarily. 
									Note that files stored here may be deleted at any time without prior notice.
				
				/usr				These are shareable, read-only files, including executable binaries and libraries, man files, and other types of documentation.
				
				/var				Variable data files are stored here. This can include things like log files, MySQL, and other database files, web server data files, email inboxes, and much more.
				
				
	/(root filesystem), /bin, /dev, /etc, /lib, /root, /sbin along with their subdirectories are considered an integral part of the root filesystem.
	That is, they cannot be created as a separate filesystem and mounted at startup time.
	This is because they (specifically, their contents) must be present at boot time in order for the system to boot properly.

	The /media and /mnt directories are part of the root filesystem, but they should never contain any data. Rather, they are simply temporary mount points.
		
	The remaining directories, do not need to be present during the boot sequence, but will be mounted later, during the startup sequence that prepares the host to perform useful work.
		

Linux unified directory structure
	The Linux filesystem unifies all physical hard drives and partitions into a single directory structure. 

	This can work only because a filesystem, such as /home, /tmp, /var, /opt, or /usr can be created on separate physical hard drives, a different partition, or a different logical volume from the / (root) filesystem and then be mounted on a mountpoint (directory) as part of the root filesystem tree.
	
	One good reason to do this is apparent during an upgrade from one version of a Linux distribution to another, or changing from one distribution to another.

	If /home is part of the root filesystem it will be reformatted as well and would then have to be restored from a backup.

	By having /home as a separate filesystem, it will be known to the installation program as a separate filesystem and formatting of it can be skipped. 
	This can also apply to /var where database, email inboxes, website, and other variable user and system data are stored.	
				
	I once had a situation where a Linux host continued to run, but prevented the user from logging in using the GUI desktop.
	I was able to log in using the command line interface (CLI) locally using one of the virtual consoles, and remotely using SSH. 
	The problem was that the /tmp filesystem had filled up and some temporary files required by the GUI desktop could not be created at login time. 
	Because the CLI login did not require files to be created in /tmp, the lack of space there did not prevent me from logging in using the CLI. 
	In this case, the /tmp directory was a separate filesystem and there was plenty of space available in the volume group the /tmp logical volume was a part of. 
	I simply expanded the /tmp logical volume to a size that accommodated my fresh understanding of the amount of temporary file space needed on that host and the problem was solved. 
	Note that this solution did not require a reboot, and as soon as the /tmp filesystem was enlarged the user was able to login to the desktop.
	
	
Filesystem types
	Linux supports reading around 100 partition types; it can create and write to only a few of these. 
	But it is possible—and very common—to mount filesystems of different types on the same root filesystem.	
				
	The complete list of filesystem partition types recognized by the Linux fdisk command is provided here, 
	so that you can get a feel for the high degree of compatibility that Linux has with very many types of systems.			
				
			
Mounting
	A mount point is simply a directory, like any other, that is created as part of the root filesystem. 
	So, for example, the home filesystem is mounted on the directory /home.	

	The Linux root filesystem is mounted on the root directory (/) very early in the boot sequence. 
	Other filesystems are mounted later, by the Linux startup programs,	
	
	Mounting of filesystems during the startup process is managed by the /etc/fstab configuration file.
	An easy way to remember that is that fstab stands for "file system table," and it is a list of filesystems that are to be mounted, their designated mount points, 
	and any options that might be needed for specific filesystems.
	
	Filesystems are mounted on an existing directory/mount point using the mount command. In general, any directory that is used as a mount point should be empty and not have any other files contained in it. 
	Linux will not prevent users from mounting one filesystem over one that is already there or on a directory that contains files. 
	
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				



















	